package xmss

import (
	"crypto/x509"
	"encoding/hex"
	"encoding/pem"
	"strings"
	"testing"
)

const certPEM  = `
-----BEGIN CERTIFICATE-----
MIICwTCCAmigAwIBAgIGAWgeY7QzMAoGCCqGSM49BAMCMHMxCzAJBgNVBAYTAlVT
MRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRkw
FwYDVQQKExBvcmcxLmV4YW1wbGUuY29tMRwwGgYDVQQDExNjYS5vcmcxLmV4YW1w
bGUuY29tMB4XDTE5MDEwNTE0MjExN1oXDTIwMDEwNTE0MjExN1owajELMAkGA1UE
BhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBGcmFuY2lz
Y28xDTALBgNVBAsTBHBlZXIxHzAdBgNVBAMTFnBlZXIwLm9yZzEuZXhhbXBsZS5j
b20wbzAhBgorBgEEAYGwGgICMBMCAQACAQowCwYJYIZIAWUDBAIBA0oAMEcCAQAE
IJonhWzl1rkVxzTQFlrsz+m+vJVHiv3bOMdRqaOWaeV1BCDHFKxxnI0CrQMTId5k
Q25ANAa/PSFO+hFBqonE8QgaaqOB2jCB1zAJBgNVHRMEAjAAMA4GA1UdDwEB/wQE
AwIHgDCBuQYDVR0jBIGxMIGugCAQJy0Sp8Bjy4HQAH9zUMQeFLP6EOPtajVoJDrn
y1YWk6F3pHUwczELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAU
BgNVBAcTDVNhbiBGcmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20x
HDAaBgNVBAMTE2NhLm9yZzEuZXhhbXBsZS5jb22CEQDEXikOb223fUcLWj7yicTm
MAoGCCqGSM49BAMCA0cAMEQCICy8jyorpSPQXDXNkt4x7vlNDz6gCr6dHmrg5e57
YCqLAiBaJUZL8vzWCNWPR4Oe71XcVyqRA8RiEieDPo6u6KbE8w==
-----END CERTIFICATE-----
`

const privateKey = `
-----BEGIN PRIVATE KEY-----
MIIJUQIBADAhBgorBgEEAYGwGgICMBMCAQACAQowCwYJYIZIAWUDBAIBBIIJJzCC
CSMCAQAwgYsCAQAEIFXKNqKUb0snr/EGwbOAafrUeqH6IavHKuR3N8n3cJ+oBCBs
JmtcktWuDbtmmvZv94574YsZbb+vSS3yh8yzQ8+FRwQgmieFbOXWuRXHNNAWWuzP
6b68lUeK/ds4x1Gpo5Zp5XUEIMcUrHGcjQKtAxMh3mRDbkA0Br89IU76EUGqicTx
CBpqoIIIjgSCCIqs7QAFc3IAJG9yZy5ib3VuY3ljYXN0bGUucHFjLmNyeXB0by54
bXNzLkJEUwAAAAAAAAABAgAKSQAFaW5kZXhJAAFrSQAKdHJlZUhlaWdodFoABHVz
ZWRMABJhdXRoZW50aWNhdGlvblBhdGh0ABBMamF2YS91dGlsL0xpc3Q7TAAEa2Vl
cHQAD0xqYXZhL3V0aWwvTWFwO0wABnJldGFpbnEAfgACTAAEcm9vdHQAK0xvcmcv
Ym91bmN5Y2FzdGxlL3BxYy9jcnlwdG8veG1zcy9YTVNTTm9kZTtMAAVzdGFja3QA
EUxqYXZhL3V0aWwvU3RhY2s7TAARdHJlZUhhc2hJbnN0YW5jZXNxAH4AAXhwAAAA
AAAAAAIAAAAKAXNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARz
aXpleHAAAAAKdwQAAAAKc3IAKW9yZy5ib3VuY3ljYXN0bGUucHFjLmNyeXB0by54
bXNzLlhNU1NOb2RlAAAAAAAAAAECAAJJAAZoZWlnaHRbAAV2YWx1ZXQAAltCeHAA
AAAAdXIAAltCrPMX+AYIVOACAAB4cAAAACB9egJHouubPD47yG5U404ufF3+urCl
c2dz0YLSsYCfEHNxAH4ACAAAAAF1cQB+AAsAAAAgi2+OvM9PwBvoodiw57NBRD8n
hHRvh9EIlYJp9jsjKZ1zcQB+AAgAAAACdXEAfgALAAAAIJrTo11DOd5siHzr2YOG
Z0j6JfNgsYVVG5cWp6rWEwyGc3EAfgAIAAAAA3VxAH4ACwAAACB1DWDjdFar4tSd
/sipAwhp46x8WM58bWJGtLlxV6ZjJnNxAH4ACAAAAAR1cQB+AAsAAAAg3fMSaLs3
YVBvDzaKujlyngIdMHmN4zssPHIm0XaiCsJzcQB+AAgAAAAFdXEAfgALAAAAIAoB
WJyuejXkONkExrm9gJ2xaWdK98knsNid+yZa7gLlc3EAfgAIAAAABnVxAH4ACwAA
ACACfG0d2GOo1fIjCjrw8G8pWY54ULBZzVOOVrtTLYGJb3NxAH4ACAAAAAd1cQB+
AAsAAAAgBqU1xM0QblcVuKkUD9Kf1uhtLwLUx1Npw9raYP2n4ZRzcQB+AAgAAAAI
dXEAfgALAAAAIC2lo4pcHohNsTroV9PWnd6O4n108Q2JkEUhKy7gMJ8Fc3EAfgAI
AAAACXVxAH4ACwAAACBB6ZD5RvQlZKvo/epzVx9OV591E3erW6ETFs+bmGn+jXhz
cgARamF2YS51dGlsLlRyZWVNYXAMwfY+LSVq5gMAAUwACmNvbXBhcmF0b3J0ABZM
amF2YS91dGlsL0NvbXBhcmF0b3I7eHBwdwQAAAAAeHNxAH4AH3B3BAAAAAFzcgAR
amF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFu
Zy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAACHNyABRqYXZhLnV0aWwuTGlua2VkTGlz
dAwpU11KYIgiAwAAeHB3BAAAAAFzcQB+AAgAAAAIdXEAfgALAAAAIBJ5Jxjx7t8i
od0YcsrhzVDyp6BWFXMmqVKyBG5EQ3UVeHhzcQB+AAgAAAAKdXEAfgALAAAAIMcU
rHGcjQKtAxMh3mRDbkA0Br89IU76EUGqicTxCBpqc3IAD2phdmEudXRpbC5TdGFj
axD+KsK7CYYdAgAAeHIAEGphdmEudXRpbC5WZWN0b3LZl31bgDuvAQMAA0kAEWNh
cGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwALZWxlbWVudERhdGF0ABNb
TGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAAHVyABNbTGphdmEubGFuZy5PYmpl
Y3Q7kM5YnxBzKWwCAAB4cAAAAApwcHBwcHBwcHBweHNxAH4ABgAAAAh3BAAAAAhz
cgAsb3JnLmJvdW5jeWNhc3RsZS5wcWMuY3J5cHRvLnhtc3MuQkRTVHJlZUhhc2gA
AAAAAAAAAQIABloACGZpbmlzaGVkSQAGaGVpZ2h0SQANaW5pdGlhbEhlaWdodFoA
C2luaXRpYWxpemVkSQAJbmV4dEluZGV4TAAIdGFpbE5vZGVxAH4AA3hwAQAAAAAA
AAAAAAAAAABzcQB+AAgAAAAAdXEAfgALAAAAIM/DUAP80EzYJxOcGmcZ/cONYQbv
EbovXTtTXXEAe42pc3EAfgAzAQAAAAEAAAABAAAAAABzcQB+AAgAAAABdXEAfgAL
AAAAIELMf4ecSy0+loRo6E0FbG6CvdL9+L69ktjey4Y5RRChc3EAfgAzAQAAAAIA
AAACAAAAAABzcQB+AAgAAAACdXEAfgALAAAAIImlY4deifA4MRU/RPQYE2Pyyv8R
sUfZjo9ZLU8v/TQNc3EAfgAzAQAAAAMAAAADAAAAAABzcQB+AAgAAAADdXEAfgAL
AAAAIId+ArCer9vJbGQf5ktKhyV5TGRGgHn9picWA1Yy2TfKc3EAfgAzAQAAAAQA
AAAEAAAAAABzcQB+AAgAAAAEdXEAfgALAAAAIGnXJu8HH+OKRA1d5bOQmxusEH22
cwbtdRzs5z5emo73c3EAfgAzAQAAAAUAAAAFAAAAAABzcQB+AAgAAAAFdXEAfgAL
AAAAIJhU7QA/w4hf7mX36FM/6OJp9kv9r3a9x4AR1f7WQTp2c3EAfgAzAQAAAAYA
AAAGAAAAAABzcQB+AAgAAAAGdXEAfgALAAAAIMxcbPFFevruzQDK9SItBxt9t6ZI
9lVf0N5YmJioT8Ybc3EAfgAzAQAAAAcAAAAHAAAAAABzcQB+AAgAAAAHdXEAfgAL
AAAAIA71zHBMWQfLtSzTneezmaOiwl1+Y8TtoYP0LPj8KuAheA==
-----END PRIVATE KEY-----
`

func TestParsePKCS8PrivateKey(t *testing.T) {
	pemKey, _ := pem.Decode([]byte(privateKey))
	key, err := ParsePKCS8PrivateKey(pemKey.Bytes)
	if err != nil {
		t.Errorf("failed parsing PKCS8 private key: %v\n", err)
	}
	privateKey := key.(*PrivateKey)

	if strings.ToUpper(hex.EncodeToString(privateKey.root)) != "C714AC719C8D02AD031321DE64436E403406BF3D214EFA1141AA89C4F1081A6A" {
		t.Errorf("PrivateKey is not correct -> root: %X", privateKey.root)
	}
	if strings.ToUpper(hex.EncodeToString(privateKey.publicSeed)) != "9A27856CE5D6B915C734D0165AECCFE9BEBC95478AFDDB38C751A9A39669E575" {
		t.Errorf("PrivateKey is not correct -> publicSeed: %X", privateKey.publicSeed)
	}
	if strings.ToUpper(hex.EncodeToString(privateKey.msgPRF.seed)) != "6C266B5C92D5AE0DBB669AF66FF78E7BE18B196DBFAF492DF287CCB343CF8547" {
		t.Errorf("PrivateKey is not correct -> secretKeyPRF: %X", privateKey.msgPRF.seed)
	}
	if strings.ToUpper(hex.EncodeToString(privateKey.wotsPRF.seed)) != "55CA36A2946F4B27AFF106C1B38069FAD47AA1FA21ABC72AE47737C9F7709FA8" {
		t.Errorf("PrivateKey is not correct -> secretKeySeed: %X", privateKey.wotsPRF.seed)
	}
	if privateKey.m.leaf != 0 {
		t.Errorf("PrivateKey is not correct -> Index: %d", privateKey.m.leaf)
	}
}

func TestParseXMSSKeys(t *testing.T) {
	pemKey, _ := pem.Decode([]byte(privateKey))
	key, err := ParsePKCS8PrivateKey(pemKey.Bytes)
	if err != nil {
		t.Errorf("failed parsing PKCS8 private key: %v\n", err)
	}
	privateKey := key.(*PrivateKey)

	if strings.ToUpper(hex.EncodeToString(privateKey.root)) != "C714AC719C8D02AD031321DE64436E403406BF3D214EFA1141AA89C4F1081A6A" {
		t.Errorf("PrivateKey is not correct -> root: %X", privateKey.root)
	}
	if strings.ToUpper(hex.EncodeToString(privateKey.publicSeed)) != "9A27856CE5D6B915C734D0165AECCFE9BEBC95478AFDDB38C751A9A39669E575" {
		t.Errorf("PrivateKey is not correct -> publicSeed: %X", privateKey.publicSeed)
	}
	if strings.ToUpper(hex.EncodeToString(privateKey.msgPRF.seed)) != "6C266B5C92D5AE0DBB669AF66FF78E7BE18B196DBFAF492DF287CCB343CF8547" {
		t.Errorf("PrivateKey is not correct -> secretKeyPRF: %X", privateKey.msgPRF.seed)
	}
	if strings.ToUpper(hex.EncodeToString(privateKey.wotsPRF.seed)) != "55CA36A2946F4B27AFF106C1B38069FAD47AA1FA21ABC72AE47737C9F7709FA8" {
		t.Errorf("PrivateKey is not correct -> secretKeySeed: %X", privateKey.wotsPRF.seed)
	}
	if privateKey.m.leaf != 0 {
		t.Errorf("PrivateKey is not correct -> Index: %d", privateKey.m.leaf)
	}

	pemCert, _ := pem.Decode([]byte(certPEM))
	cert, err := x509.ParseCertificate(pemCert.Bytes)
	if err != nil {
		t.Errorf("failed parsing x509 certificate: %v\n", err)
	}
	key, err = ParsePKIXPublicKey(cert.RawSubjectPublicKeyInfo)
	if err != nil {
		t.Errorf("failed parsing PKIX public key: %v\n", err)
	}

	publicKey := key.(*PublicKey)
	if publicKey.Height != 10 {
		t.Errorf("Height is not 10: %d", publicKey.Height)
	}
	if strings.ToUpper(hex.EncodeToString(publicKey.root)) != "C714AC719C8D02AD031321DE64436E403406BF3D214EFA1141AA89C4F1081A6A" {
		t.Errorf("PrivateKey is not correct -> root: %X", publicKey.root)
	}
	if strings.ToUpper(hex.EncodeToString(publicKey.publicSeed)) != "9A27856CE5D6B915C734D0165AECCFE9BEBC95478AFDDB38C751A9A39669E575" {
		t.Errorf("PrivateKey is not correct -> publicSeed: %X", publicKey.publicSeed)
	}

	sig := privateKey.Sign([]byte("Test Nachricht"))
	exSig
	if strings.ToUpper(hex.EncodeToString(sig)) != exSig {
		t.Errorf("Signature is not correct: %T", sig)
	}

	if !publicKey.Verify(sig, []byte("Test Nachricht")) {
		t.Errorf("Verification failed")
	}

}


func TestParsePKIXPublicKey(t *testing.T) {
	pemCert, _ := pem.Decode([]byte(certPEM))
	cert, err := x509.ParseCertificate(pemCert.Bytes)
	if err != nil {
		t.Errorf("failed parsing x509 certificate: %v\n", err)
	}
	key, err := ParsePKIXPublicKey(cert.RawSubjectPublicKeyInfo)
	if err != nil {
		t.Errorf("failed parsing PKIX public key: %v\n", err)
	}

	publicKey := key.(*PublicKey)
	if publicKey.Height != 10 {
		t.Errorf("Height is not 10: %d", publicKey.Height)
	}
	if strings.ToUpper(hex.EncodeToString(publicKey.root)) != "C714AC719C8D02AD031321DE64436E403406BF3D214EFA1141AA89C4F1081A6A" {
		t.Errorf("PrivateKey is not correct -> root: %X", publicKey.root)
	}
	if strings.ToUpper(hex.EncodeToString(publicKey.publicSeed)) != "9A27856CE5D6B915C734D0165AECCFE9BEBC95478AFDDB38C751A9A39669E575" {
		t.Errorf("PrivateKey is not correct -> publicSeed: %X", publicKey.publicSeed)
	}
}